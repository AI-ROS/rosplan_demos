<?xml version="1.0"?>
<launch>

    <param name="/use_sim_time" value="true"/>

    <!-- Important Experiment Arguments -->
    <arg name="approach"         default="0" />
    <arg name="max_sample_size"  default="10" />
    <arg name="max_prm_size"     default="1000" />
    <arg name="rviz"             default="true" />
    <arg name="objects_file" default="$(find hidden_costs_generator)/object_config/simple_house_12doughnuts_variant04.yaml" />

    <!-- Arguments -->
    <arg name="model" default="waffle" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="map_file" default="$(find rosplan_demo_stage)/maps/simple_house.yaml"/>
    <arg name="common_param_file" default="$(find rosplan_demo_stage)/config/costmap_common_params_waffle.yaml"/>
    <arg name="local_param_file" default="$(find rosplan_demo_stage)/config/local_costmap_params.yaml"/>
    <arg name="global_param_file" default="$(find rosplan_demo_stage)/config/global_costmap_params.yaml"/>
    <arg name="animate_sampling" default="false" />

    <!-- rosplan move base action interface, makes link between rosplan dispatcher and hardware -->
    <node pkg="stage_ros" type="stageros" name="stageros" args="$(find rosplan_demo_stage)/world/simple_house.world" respawn="false" output="log">
    </node>


    <!-- Map server -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)"/>

    <!-- AMCL -->
    <include file="$(find turtlebot3_navigation)/launch/amcl.launch">
        <arg name="scan_topic" value="base_scan" />
        <arg name="initial_pose_x" value="6.525"/>
        <arg name="initial_pose_y" value="5.375"/>
        <arg name="initial_pose_a" value="0.000"/>
    </include>

    <!-- roadmap (random waypoint generation) -->
    <include file="$(find rosplan_interface_mapping)/launch/rosplan_roadmap_server.launch" >
        <arg name="use_static_map" value="true" />
        <arg name="update_waypoints" value="$(eval arg('approach')==1)" />
        <arg name="update_connectivity" value="$(eval arg('approach')==1)" />
        <arg name="wp_reference_frame"  value="/map" />
        <arg name="rosplan_kb_name"     value="rosplan_knowledge_base" />
        <arg name="costmap_topic"       value="/costmap" />
    </include>

    <!-- ROSPlan -->
    <include file="$(find rosplan_planning_system)/launch/interfaced_planning_system.launch" >
        <arg name="domain_path" value="$(find rosplan_demo_stage)/pddl/domain_turtlebot_demo.pddl" />
        <!-- load a particular initial state into KB at startup (optional) -->
        <arg name="problem_path" value="$(find rosplan_demo_stage)/pddl/problem_turtlebot_demo.pddl" />
        <!-- automatically generated pddl problem will be created here -->
        <arg name="autom_gen_problem_path" value="$(find rosplan_demo_stage)/pddl/generated_problem.pddl" />
        <!-- planner will produce output plan and write to this location -->
        <arg name="data_path" value="$(find rosplan_demo_stage)/pddl/" />
    </include>

    <!-- rosplan sensing interface -->
    <node name="rosplan_sensing_interface" pkg="rosplan_sensing_interface" type="sensing_interface.py" respawn="false" output="screen">
        <rosparam command="load" file="$(find rosplan_demo_stage)/config/turtlebot_stage_sensing.yaml" />
        <rosparam file="$(arg objects_file)" command="load" />
        <param name="main_rate"  value="10" />
    </node>

    <!-- sampling approach -->
    <group if="$(eval arg('approach')==0)">
        <!-- waypoint filtering node (roadmap) -->
        <node pkg="rosplan_waypoint_sampling" name="waypoint_sampler" type="rp_roadmap_filter" output="screen">
            <param name="srv_timeout"         value="6" />
            <param name="waypoint_count"      value="20" />
            <param name="wp_reference_frame"  value="map" />
            <param name="wp_namespace_input"  value="/rosplan_demo_waypoints" />
            <param name="wp_namespace_output" value="/task_planning_waypoints" />
            <param name="rosplan_kb_name"     value="rosplan_knowledge_base" />
            <param name="costmap_topic"       value="/costmap" />

            <!-- The radius around a sampled point for which the sampling probability is reduced to 0 -->
            <param name="minimum_sample_separation" value="1.6" />

            <!-- Publish the modified probability distribution during sampling and slow things down a bit -->
            <param name="animate_sampling" value="$(arg animate_sampling)" />
        </node>

        <!-- hidden costmaps -->
        <node pkg="rosplan_waypoint_sampling" name="hidden_costmap" type="HiddenCostPublisher.py" output="screen">
            <rosparam file="$(arg objects_file)" command="load" />
        </node>
    </group>


    <!-- fixed waypoint generation node (1 per object) (roadmap) -->
    <node pkg="rosplan_waypoint_sampling" name="waypoint_sampler" type="rp_fixed_wp_gen" output="screen" if="$(eval arg('approach')==2)">
        <param name="srv_timeout"         value="6" />
        <param name="waypoint_count"      value="20" />
        <param name="wp_reference_frame"  value="map" />
        <param name="wp_namespace_input"  value="/rosplan_demo_waypoints" />
        <param name="wp_namespace_output" value="/task_planning_waypoints" />
        <param name="rosplan_kb_name"     value="rosplan_knowledge_base" />
        <param name="costmap_topic"       value="/costmap" />

        <!-- The radius around a sampled point for which the sampling probability is reduced to 0 -->
        <param name="minimum_sample_separation" value="1.6" />

        <!-- Publish the modified probability distribution during sampling and slow things down a bit -->
        <param name="animate_sampling" value="$(arg animate_sampling)" />
        <rosparam file="$(arg objects_file)" command="load" />
    </node>


    <group if="$(arg rviz)">
        <!-- visualisation of robot sensor data -->
        <node name="rviz" pkg="rviz" type="rviz" args="-d $(find rosplan_demo_stage)/config/turtlebot3.rviz" />
    </group>

    <!-- main coordinator -->
    <node pkg="rosplan_demo_stage" type="main_executor.py" name="coordinator" respawn="false" required="true" output="screen">
        <param name="wait_for_rviz"         value="$(arg rviz)" />
        <param name="max_sample_size"       value="$(arg max_sample_size)" />
        <param name="max_prm_size"          value="$(arg max_prm_size)" />

        <!-- 0: sampling, 1: PRM, 2: Fixed WPs -->
        <param name="approach"              value="$(arg approach)" />
    </node>

</launch>
